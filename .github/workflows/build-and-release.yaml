name: Build with Briefcase

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.2"

      - name: Install Briefcase
        run: |
          python -m pip install --upgrade pip
          pip install briefcase

      - name: Initialize Briefcase project (safe to re-run)
        run: briefcase create

      - name: Build app
        run: briefcase build

      - name: Package app
        run: briefcase package

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oci-session-manager-${{ runner.os }}
          path: dist/*

  create-release:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Release Version
        id: version
        run: |
          TAG="v$(date +'%Y.%m.%d.%H%M')"
          echo "RELEASE_TAG=$TAG" >> "$GITHUB_ENV"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create Git Tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ env.RELEASE_TAG }}
          git push origin ${{ env.RELEASE_TAG }}

      - name: Generate Markdown changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$LAST_TAG" ]; then
            RANGE=""
            HEADER="## ðŸš€ Initial Release"
          else
            RANGE="$LAST_TAG..HEAD"
            HEADER="## ðŸ“¦ Changes since [$LAST_TAG](https://github.com/${{ github.repository }}/releases/tag/$LAST_TAG)"
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$HEADER" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          git log $RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Archive all platform builds (OS-specific)
        run: |
          mkdir release
          for dir in dist/*; do
            base=$(basename "$dir")

            if [[ "$base" == *Windows* ]]; then
              zip -r "release/${base}.zip" "$dir"
            else
              tar -czvf "release/${base}.tar.gz" -C "$dir" .
            fi
          done

      - name: Create GitHub Release with Archives
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          body: |
            Changes:
            ${{ env.CHANGELOG }}
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
