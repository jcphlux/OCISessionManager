name: Build and Release Tkinter App

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allow manual triggering of workflow

permissions:
  contents: write
jobs:
  pyinstaller-build-windows:
    runs-on: windows-latest
    steps:
      - name: Install UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true
      - name: Versatile PyInstaller (Windows)
        uses: sayyid5416/pyinstaller@v1.8.0
        with:
          python_ver: "3.13.2"
          spec: "OCISessionManager.py"
          requirements: "requirements.txt"
          upload_exe_with_name: "OCISessionManager-Windows"
          options: --onefile --noconsole --strip --clean --upx-dir uxp --add-data "resources;resources" --icon "resources/green_icon.ico"
  pyinstaller-build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Install UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true
      - name: Versatile PyInstaller (Ubuntu)
        uses: sayyid5416/pyinstaller@v1.8.0
        with:
          python_ver: "3.13.2"
          spec: "OCISessionManager.py"
          requirements: "requirements.txt"
          upload_exe_with_name: "OCISessionManager-Ubuntu"
          options: --onefile --noconsole --strip --clean --upx-dir upx --add-data "resources:resources" --icon "resources/green_icon.ico"
  pyinstaller-build-macos:
    runs-on: macos-latest
    steps:
      - name: Versatile PyInstaller (macOS)
        uses: sayyid5416/pyinstaller@v1.8.0
        with:
          python_ver: "3.13.2"
          spec: "OCISessionManager.py"
          requirements: "requirements.txt"
          upload_exe_with_name: "OCISessionManager-macOS"
          options: --onefile --noconsole --strip --clean --add-data "resources:resources" --icon "resources/green_icon.ico"
  create-release:
    needs:
      - pyinstaller-build-windows
      - pyinstaller-build-ubuntu
      - pyinstaller-build-macos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Release Version
        id: version
        run: |
          TAG="v$(date +'%Y.%m.%d.%H%M')"
          echo "RELEASE_TAG=$TAG" >> "$GITHUB_ENV"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create Git Tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ env.RELEASE_TAG }}
          git push origin ${{ env.RELEASE_TAG }}

      - name: Generate Markdown changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$LAST_TAG" ]; then
            RANGE=""
            HEADER="## ðŸš€ Initial Release"
          else
            RANGE="$LAST_TAG..HEAD"
            HEADER="## ðŸ“¦ Changes since [$LAST_TAG](https://github.com/${{ github.repository }}/releases/tag/$LAST_TAG)"
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$HEADER" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          git log $RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: OCISessionManager-Windows
          path: dist/OCISessionManager-Windows

      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: OCISessionManager-Ubuntu
          path: dist/OCISessionManager-Ubuntu

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: OCISessionManager-macOS
          path: dist/OCISessionManager-macOS

      - name: Zip all platform builds
        run: |
          cd dist
          zip -r OCISessionManager-Windows.zip OCISessionManager-Windows
          zip -r OCISessionManager-Ubuntu.zip OCISessionManager-Ubuntu
          zip -r OCISessionManager-macOS.zip OCISessionManager-macOS
          cd ..

      - name: Create GitHub Release with ZIPs
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          body: |
            Changes:
            ${{ env.CHANGELOG }}
          files: |
            dist/OCISessionManager-Windows.zip
            dist/OCISessionManager-Ubuntu.zip
            dist/OCISessionManager-macOS.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

