name: Build and Release Tkinter App

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Manually trigger the workflow if needed

jobs:
  pyinstaller-build:
    runs-on:  #<windows-latest / ubuntu-latest / ..... etc>
    steps:
      - name: Create Executable
        uses: sayyid5416/pyinstaller@v1
        with:
          python_ver: '3.13'
          # pyinstaller_ver: '==5.13.2'
          spec: 'main.py'
          requirements: 'requirements.txt'
          upload_exe_with_name: 'My executable'
          options: --onefile --noconsole --strip --clean --name OCISessionManager --add-data "resources;resources" --icon "resources/green_icon.ico"
          spec_options: # any custom arguments you want like: `--debug`


jobs:
  build_windows:
    runs-on: windows-latest # Build on Windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pip-tools
          pip-compile --generate-hashes --strip-extras --no-emit-find-links requirements.in

      - name: Install dependencies from requirements.txt
        run: pip install -r requirements.txt

      - name: Install UPX on Windows
        run: |
          # Download UPX from the GitHub releases
          Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip" -OutFile "upx.zip"
          Expand-Archive -Path "upx.zip" -DestinationPath "C:\dev\upx"
          Remove-Item -Force "upx.zip"
          # Add UPX to the PATH
          $env:PATH += ";C:\dev\upx\upx-5.0.0-win64"

      - name: Check for UPX and set UPX_FLAG
        run: |
          if (Test-Path "C:\dev\upx\upx-5.0.0-win64\upx.exe") {
            Write-Host "UPX found. Enabling UPX compression..."
            $env:UPX_FLAG = "--upx-dir C:\dev\upx\upx-5.0.0-win64"
          } else {
            Write-Host "UPX not found. Skipping UPX compression..."
            $env:UPX_FLAG = ""
          }

      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --noconsole --strip --clean ^
            $env:UPX_FLAG ^
            --name OCIConnectionManager ^
            --add-data "resources;resources" ^
            --icon "resources/green_icon.ico" ^
            main.py

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-build-${{ env.VERSION }}
          path: dist/OCIConnectionManager.exe # Path to the output .exe file

  build_macos:
    runs-on: macos-latest # Build on macOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pip-tools
          pip-compile --generate-hashes --strip-extras --no-emit-find-links requirements.in

      - name: Install dependencies from requirements.txt
        run: pip install -r requirements.txt

      - name: Install UPX on macOS
        run: |
          brew install upx

      - name: Build with PyInstaller for macOS
        run: |
          pyinstaller --onefile --noconsole --strip --clean ^
            --name OCIConnectionManager ^
            --add-data "resources:resources" ^
            --icon "resources/green_icon.icns" ^
            main.py

      - name: Upload macOS build artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-build-${{ env.VERSION }}
          path: dist/OCIConnectionManager.app # Path to the output .app bundle

  build_linux:
    runs-on: ubuntu-latest # Build on Linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pip-tools
          pip-compile --generate-hashes --strip-extras --no-emit-find-links requirements.in

      - name: Install Tkinter for Linux (Ubuntu)
        run: sudo apt-get install -y python3-tk # Install Tkinter on Linux

      - name: Install UPX on Linux
        run: |
          wget https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-linux64.tar.xz
          tar -xf upx-5.0.0-linux64.tar.xz
          sudo mv upx-5.0.0-linux64/upx /usr/local/bin
          rm -rf upx-5.0.0-linux64 upx-5.0.0-linux64.tar.xz

      - name: Install dependencies from requirements.txt
        run: pip install -r requirements.txt

      - name: Build with PyInstaller for Linux
        run: |
          pyinstaller --onefile --noconsole --strip --clean ^
            --name OCIConnectionManager ^
            --add-data "resources:resources" ^
            main.py

      - name: Upload Linux build artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-build-${{ env.VERSION }}
          path: dist/OCIConnectionManager # Path to the output Linux executable

  create_release:
    needs: [build_windows, build_macos, build_linux]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/OCIConnectionManager.exe
            dist/OCIConnectionManager.app
            dist/OCIConnectionManager  # Adjust paths based on your build outputs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: v${{ env.VERSION }}
