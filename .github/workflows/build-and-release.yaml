name: Build with Briefcase

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - name: Set formatted release version
        id: set
        run: |
          DATE=$(date -d "${{ github.run_started_at }}" +'%Y.%m.%d')
          TIME=$(date -d "${{ github.run_started_at }}" +'%H%M')
          TAG="${DATE}.${TIME}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using version: $TAG"

  build:
    needs: set-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (non-Linux)
        if: runner.os != 'Linux'
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.2"

      - name: Install OS dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y python3-tk

      - name: Install Briefcase
        run: |
          python -m pip install --upgrade pip
          pip install briefcase

      - name: Inject version into pyproject.toml
        run: |
          VERSION="${{ needs.set-version.outputs.tag }}"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' "s/^version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          else
            sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          fi


      - name: Create app
        run: |
          briefcase create

      - name: Build app
        run: |
          briefcase build

      - name: Package app (ad-hoc signing)
        run: |
          briefcase package --adhoc-sign

      - name: Upload packaged app
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/*
          if-no-files-found: error

  create-release:
    needs: [set-version, build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Git Tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ needs.set-version.outputs.tag }}
          git push origin ${{ needs.set-version.outputs.tag }}

      - name: Generate Markdown changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$LAST_TAG" ]; then
            HEADER="## ðŸš€ Initial Release"
            RANGE=""
          else
            HEADER="## ðŸ“¦ Changes since [$LAST_TAG](https://github.com/${{ github.repository }}/releases/tag/$LAST_TAG)"
            RANGE="$LAST_TAG..HEAD"
          fi

          {
            echo "CHANGELOG<<EOF"
            echo "$HEADER"
            echo ""
            git log $RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))"
            echo ""
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist
          merge-multiple: true

      - name: Archive each platform without top-level dist/
        run: |
          mkdir release
          for file in dist/*; do
            base=$(basename "$file")
            name="${base%.*}"
            ext="${base##*.}"

            if [[ "$ext" == "exe" || "$ext" == "msi" ]]; then
              zip -j "release/${name}.zip" "$file"
            else
              tar -czvf "release/${name}.tar.gz" -C "dist" "$base"
            fi
          done

      - name: Create GitHub Release with Archives
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.set-version.outputs.tag }}
          name: Release ${{ needs.set-version.outputs.tag }}
          body: |
            Changes:
            ${{ env.CHANGELOG }}
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
